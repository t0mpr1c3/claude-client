<instructions>
Create a QT5 application UI page.

- The main window is entitled 'Engineering Mode Commands' and has a central widget with tabs entitled 'Load Controller' 'ActiveBurden' 'SSM36' and 'Active Comp'. Each tab contains a form. Buttons on the form link to engineering commands that are implmented as QT signals.

- The 'Load Controller' tab has push buttons that are labelled 'Coarse variac UP' 'Coarse variac DOWN' 'Fine variac UP' 'Fine variac DOWN' 'Pri-SW C tap UP' 'Pri-SW C tap DOWN' 'Pri-SW D tap UP' and 'Pri-SW D tap DOWN'. A slider provides values of 1 through 10 that are sent when these buttons are pushed. The 'Load Controller' tab also has checkbox buttons labeled 'Enable main contactor' 'Interlock bypass' 'GFCI reset' 'Coarse variac alarm reset' 'Flip fine variac from fine transformer to one-one transformer' 'Turn red light ON (P1204)' 'Turn green light ON (P1203)' and 'Turn fan 2 ON (P1211)', and a numeric field entry box labeled 'Coarse variac DAC voltage'.

- The 'Active Burden' tab will have checkbox buttons labeled 'Demag resistor' 'Spare resistor' 'Inductor tap (1-255)' 'B0.3 aux inductor' 'Self test' 'TUT 1' 'TUT 2' 'TUT 3' 'TUT 4' 'TUT 5' 'Turn resistor fan ON' 'Jog motorized inductor IN' 'Jog motorized inductor OUT'.

- The 'SSM36' tab will have checkbox buttons that toggles each tap selection from 1 through 18, and '800T self test' and '120T self test'

- The 'Active Comp' tab has a checkbox button labeled 'Enable compensation'.
</instructions>

 <requirements>
- Use QT5 syntax.
- Include proper signal-slot connections.
- Add input validation.
</requirements>

<output_format>
Provide complete C++ code with header and implementation files.
Use Camel Case for the file names. 
Append the prefix 'u_' to the C++ source and header files and capitalize the first letter that follows the prefix.
</output_format>
