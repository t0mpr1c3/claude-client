<instructions>
You are a senior Qt 5 developer with extensive QML experience.

Create a UI page using QML and a C++ backend. The UI is for an embedded system.

- The main window is entitled "Engineering Mode Commands" and has a central widget with tabs entitled "Load Controller" "Active Burden" "SSM36" "Active Comp" and "CCT Controller". Each tab contains a form. Buttons on the link to engineering commands that are implemented as QT signals. At the bottom of the page there is a button labeled "Quit". When pressed, the "Quit" button asks the user to choose "Do you want to leave engineering mode?". If the user responds "Yes", a signal is sent that quits the application.

- The "Load Controller" tab has a group entitled "Coarse Variac" which contains a horizontal slider labeled "Coarse variac DAC voltage" with a range 0 to 10, a horizontal slider labeled "Coarse variac Jog time mSecs" with a range 0 to 999, and push buttons that are labelled "Coarse variac UP" "Coarse variac DOWN". When either of these two buttons is pressed, a signal is sent that emits the values from the two sliders. 

- The "Load Controller" tab also has a group entitled "Stepper Motor Controls" containing push buttons labeled "Fine variac UP" "Fine variac DOWN" "Pri-SW C tap UP" "Pri-SW C tap DOWN" "Pri-SW D tap UP" and "Pri-SW D tap DOWN", and a horizontal slider labeled "Step Size" that provides values of 1 through 10 that are sent when those buttons are pushed.

- The "Load Controller" tab also has checkbox buttons labeled "Enable main contactor" "Interlock bypass" "Turn red light ON (P1204)" "Turn green light ON (P1203)" and "Turn fan 2 ON (P1211)", a radio button group titled "Fine Variac" with radio buttons labeled "Fine transformer" and "1:1 transformer", and two pushbuttons "GFCI reset" and "Coarse variac alarm reset". 

- The "Active Burden" tab has a group entitled "Resistors" containing checkbox buttons labeled "R1 75 mOhm", "R2 0.261 Ohm", "R3 0.47 Ohm", "R4 0.5 Ohm", "R5 1.2 Ohm", "R6 2.5 Ohm", "R7 3 Ohm", "R8 7.5 Ohm", "R9 10 Ohm", "R10 22 Ohm", "R11 30 Ohm", "R12 33 Ohm", "R13 100 Ohm", "R14 100 Ohm", "R15 150 Ohm", "R16 200 Ohm", "R17 500 Ohm", "R18 1K Ohm" "Spare resistor (E0.04)".
 
- The "Active Burden" tab also has a group entitled "Inductors" containing checkbox buttons for "Inductor tap 1T" "Inductor tap 2T" "Inductor tap 4T" "Inductor tap 8T" "Inductor tap 16T" "Inductor tap 32T" "Inductor tap 64T" "Inductor tap 128T", and "B0.3 aux inductor". It also has a group entitled "Test CTs" containing checkbox buttons labeled "TUT 1 SHORT" "TUT 1 ENABLE" "TUT 2 SHORT" "TUT 2 ENABLE" "TUT 3 SHORT" "TUT 3 ENABLE" "TUT 4 SHORT" "TUT 4 ENABLE" "TUT 5 SHORT" "TUT 5 ENABLE".

- The "Active Burden" tab also has a group entitled "Other Controls" containining checkboxes "Self test" and "Turn resistor fan ON".

- The "Active Burden" tab has another group entitled "Inductor Jog" containing push buttons "Jog motorized inductor IN" and "Jog motorized inductor OUT" and a horizontal slider labeled "Step Size" provides values of 1 through 10 that are sent when those buttons are pushed.

- The "SSM36" tab has checkbox buttons that toggles "Tap 1 (120T)" "Tap 2 (5T)" "Tap 3 (25T)" "Tap 4 (10T)" "Tap 5 (40T)" "Tap 6 (40T)" "Tap 7 (10T)" "Tap 8 (50T)" "Tap 9 (60T)" "Tap 10 (15T)" "Tap 11 (25T)" "Tap 12 (100T)" "Tap 13 (100T)" "Tap 14 (200T)" "Tap 15 (200T)" "Tap 16 (200T)" "Tap 17 (300T)" "Tap 18 (100T)", and a radio button group entitled "Self Test" with radio buttons labeled "800T self test" and "120T self test".

- The "Active Comp" tab has a checkbox button labeled "Enable compensation". Just for fun, have a little button marked "J+T" that displays a cartoon of Tom and Jerry.

- The "CCT Controller" tab has a radio button group entitled "CCT Mode" with radio buttons labeled "MET Default" "Range 0" "Range 1" "Range 2". The "CCT Controller" tab also has checkbox buttons "Bypass-S" and "Bypass-U".
</instructions>

 <requirements>
- Use QT5 syntax.
- Create the layout in a QML file.
- Follow QML best practices by separating the UI from the business logic.
- Do not use the QtQuick, QuickControls, or QuickControls2 modules.
- Include proper signal-slot connections.
- Add input validation.
- Use clear comments explaining the code sections that integrate the QML with C++.
</requirements>

<output_format>
Provide QML code for the UI page definition and C++ files for the other parts of the implementation.
The project file is `EngineeringModeUI.pro`.
The QML file is `u_EngineeringModeUI.qml`.
The C++ file is `EngineeringModeUI.cpp`.
</output_format>

